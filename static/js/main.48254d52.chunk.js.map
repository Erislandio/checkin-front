{"version":3,"sources":["serviceWorker.js","assets/icons.js","components/pages/login/login.js","components/atoms/formDefault.js","components/pages/create/signin.js","index.js","components/Index.js"],"names":["Boolean","window","location","hostname","match","Logo","src","LoginScreen","id","className","type","placeholder","to","style","color","FormDefaultWrapper","onSubmit","children","InputDefault","name","onChange","disabled","required","title","ButtonDefault","onClick","SignInScreen","e","preventDefault","ReactDOM","render","basename","process","path","exact","component","Login","SignIn","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCZOC,G,MAAO,kBAClB,yBAAKC,IAAI,4DCFI,SAASC,IACtB,OACE,6BAASC,GAAG,SACV,0BAAMC,UAAU,aACd,gCACE,kBAAC,EAAD,MACA,wCAEF,0BAAMD,GAAG,aAAaC,UAAU,gBAC9B,qCACA,yBAAKA,UAAU,iBACb,wCACA,2BAAOC,KAAK,QAAQC,YAAY,WAElC,yBAAKF,UAAU,iBACb,wCACA,2BAAOC,KAAK,WAAWC,YAAY,WAErC,yBAAKF,UAAU,kBACb,2CAEF,kBAAC,IAAD,CAAMG,GAAG,WAAT,kBACc,0BAAMC,MAAO,CAAEC,MAAO,YAAtB,SADd,Q,UCxBGC,EAAqB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC7C,OAAO,0BAAMD,SAAUA,EAAUP,UAAU,gBAAgBQ,IAGhDC,EAAe,SAAC,GAAD,IAC1BP,EAD0B,EAC1BA,YACAQ,EAF0B,EAE1BA,KACAT,EAH0B,EAG1BA,KACAU,EAJ0B,EAI1BA,SACAC,EAL0B,EAK1BA,SACAC,EAN0B,EAM1BA,SACAC,EAP0B,EAO1BA,MAP0B,OAS1B,yBAAKd,UAAU,iBACb,+BAAQc,GACR,2BACEZ,YAAaA,EACbD,KAAMA,EACNU,SAAUA,EACVD,KAAMA,EACNE,SAAUA,EACVC,SAAUA,MAKHE,EAAgB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASF,EAAY,EAAZA,MACvC,OACE,yBAAKd,UAAU,kBACb,4BAAQgB,QAASA,GAAUF,KCtBlB,SAASG,IAKtB,OACE,6BAASlB,GAAG,SACV,0BAAMC,UAAU,aACd,gCACE,yBAAKH,IAAI,0DACT,wCAEF,kBAAC,EAAD,CAAoBU,SAXL,SAAAW,GACnBA,EAAEC,mBAWI,0CACA,kBAAC,EAAD,CAAcL,MAAM,QAAQZ,YAAY,UACxC,kBAAC,EAAD,CAAcY,MAAM,OAAOZ,YAAY,SACvC,kBAAC,EAAD,CAAcY,MAAM,YAAYZ,YAAY,cAC5C,kBAAC,EAAD,CAAcY,MAAM,QAAQZ,YAAY,UACxC,kBAAC,EAAD,CAAeY,MAAM,UACrB,kBAAC,IAAD,CAAMX,GAAG,KAAT,iBACa,0BAAMC,MAAO,CAAEC,MAAO,YAAtB,SADb,QCvBVe,IAASC,OAAO,mBCAD,WACb,OACE,kBAAC,IAAD,CAAYC,SAAUC,kBACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,UAAUC,OAAK,EAACC,UAAWE,QDL/B,MAASC,SAASC,eAAe,SL8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48254d52.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nexport const HappyFace = () => (\n  <img src=\"https://img.icons8.com/cute-clipart/64/000000/happy.png\" />\n);\n\nexport const Logo = () => (\n  <img src=\"https://img.icons8.com/cotton/64/000000/test-tube.png\" />\n);\n","import React from \"react\";\nimport \"./login.css\";\nimport { Link } from \"react-router-dom\";\nimport { Logo } from \"../../../assets/icons\";\n\nexport default function LoginScreen() {\n  return (\n    <section id=\"login\">\n      <main className=\"container\">\n        <header>\n          <Logo />\n          <h3>Checkin</h3>\n        </header>\n        <form id=\"login-form\" className=\"default-form\">\n          <h3>Login</h3>\n          <div className=\"default-input\">\n            <label>email</label>\n            <input type=\"email\" placeholder=\"email\" />\n          </div>\n          <div className=\"default-input\">\n            <label>senha</label>\n            <input type=\"password\" placeholder=\"senha\" />\n          </div>\n          <div className=\"default-button\">\n            <button>Entrar</button>\n          </div>\n          <Link to=\"/signin\">\n            NÃ£o tem uma <span style={{ color: \"#c599c6\" }}>Conta</span>?\n          </Link>\n        </form>\n      </main>\n    </section>\n  );\n}\n","import React from \"react\";\n\nexport const FormDefaultWrapper = ({ onSubmit, children }) => {\n  return <form onSubmit={onSubmit} className=\"default-form\">{children}</form>;\n};\n\nexport const InputDefault = ({\n  placeholder,\n  name,\n  type,\n  onChange,\n  disabled,\n  required,\n  title\n}) => (\n  <div className=\"default-input\">\n    <label>{title}</label>\n    <input\n      placeholder={placeholder}\n      type={type}\n      onChange={onChange}\n      name={name}\n      disabled={disabled}\n      required={required}\n    />\n  </div>\n);\n\nexport const ButtonDefault = ({ onClick, title }) => {\n  return (\n    <div className=\"default-button\">\n      <button onClick={onClick}>{title}</button>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./signin.css\";\nimport { Link } from \"react-router-dom\";\nimport {\n  FormDefaultWrapper,\n  InputDefault,\n  ButtonDefault\n} from \"../../atoms/formDefault\";\n\nexport default function SignInScreen() {\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  return (\n    <section id=\"login\">\n      <main className=\"container\">\n        <header>\n          <img src=\"https://img.icons8.com/cotton/64/000000/test-tube.png\" />\n          <h3>Checkin</h3>\n        </header>\n        <FormDefaultWrapper onSubmit={handleSubmit}>\n          <h3>Nova conta</h3>\n          <InputDefault title=\"Email\" placeholder=\"Email\" />\n          <InputDefault title=\"Nome\" placeholder=\"Nome\" />\n          <InputDefault title=\"Sobrenome\" placeholder=\"Sobrenome\" />\n          <InputDefault title=\"Senha\" placeholder=\"Senha\" />\n          <ButtonDefault title=\"Criar\" />\n          <Link to=\"/\">\n            JÃ¡ tem uma <span style={{ color: \"#c599c6\" }}>Conta</span>?\n          </Link>\n        </FormDefaultWrapper>\n      </main>\n    </section>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./components/Index\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\nimport Login from \"./pages/login/login\";\nimport SignIn from \"./pages/create/signin\";\n\nexport default function App() {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/\" exact component={Login} />\n        <Route path=\"/signin\" exact component={SignIn} />\n      </Switch>\n    </HashRouter>\n  );\n}\n"],"sourceRoot":""}